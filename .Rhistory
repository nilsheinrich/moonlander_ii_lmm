write_feather(soc_data, "soc_data/Experiment1_SoCData.arrow")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
library(lmerTest)
library(sjPlot)
library(latex2exp)
library(ggplot2)
library(fitdistrplus)
library(simr)
library(arrow)
set.seed(36)
N_iterations <- 10000
setwd('/Users/heinrich/Projects/eye_movement_analysis_moonlander/')
soc_data <- read_csv("soc_data/soc_data.csv")
soc_data <- soc_data %>%
mutate(level_difficulty = case_when(
(level == 1 | level == 2) ~ "easy",
(level == 3 | level == 4) ~ "medium",
(level == 5 | level == 6) ~ "hard",
))
soc_data$level_difficulty <- as.factor(soc_data$level_difficulty)
soc_data <- within(soc_data, level_difficulty <- relevel(level_difficulty, ref = "easy"))
soc_data$input_noise <- as.factor(soc_data$input_noise)
soc_data <- within(soc_data, input_noise <- relevel(input_noise, ref = "N"))
table(soc_data$SoC)
write_feather(soc_data, "soc_data/Experiment1_SoCData.arrow")
soc_data <- read_csv("soc_data/soc_data.csv")
View(soc_data)
soc_data <- read_csv("soc_data/soc_data.csv")
soc_data <- soc_data %>%
mutate(level_difficulty = case_when(
(level == 1 | level == 2) ~ "easy",
(level == 3 | level == 4) ~ "medium",
(level == 5 | level == 6) ~ "hard",
))
soc_data$level_difficulty <- as.factor(soc_data$level_difficulty)
soc_data <- within(soc_data, level_difficulty <- relevel(level_difficulty, ref = "easy"))
soc_data$input_noise <- as.factor(soc_data$input_noise)
soc_data <- within(soc_data, input_noise <- relevel(input_noise, ref = "N"))
table(soc_data$SoC)
write_feather(soc_data, "soc_data/Experiment1_SoCData.arrow")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
library(lmerTest)
library(sjPlot)
library(latex2exp)
library(ggplot2)
library(fitdistrplus)
library(simr)
library(arrow)
set.seed(36)
N_iterations <- 10000
setwd('/Users/heinrich/Projects/eye_movement_analysis_moonlander/')
soc_data <- read_csv("soc_data/soc_data.csv")
soc_data <- soc_data %>%
mutate(level_difficulty = case_when(
(level == 1 | level == 2) ~ "easy",
(level == 3 | level == 4) ~ "medium",
(level == 5 | level == 6) ~ "hard",
))
soc_data$level_difficulty <- as.factor(soc_data$level_difficulty)
soc_data <- within(soc_data, level_difficulty <- relevel(level_difficulty, ref = "easy"))
soc_data$input_noise <- as.factor(soc_data$input_noise)
soc_data <- within(soc_data, input_noise <- relevel(input_noise, ref = "N"))
#table(soc_data$SoC)
write_feather(soc_data, "soc_data/Experiment1_SoCData.arrow")
done_model <- glmer(SoC ~ done + drift*level_difficulty + input_noise + (1|ID),  data = soc_data, family=binomial)
soc_data$done
soc_data$done[0]
type(soc_data$done[0])
infer_type(soc_data$done[0])
done_model <- glmer(SoC ~ done + drift*level_difficulty + input_noise + (1|ID),  data = soc_data, family=bernoulli)
binomial
done_model <- glmer(SoC ~ done + drift*level_difficulty + input_noise + (1|ID),  data = soc_data, family=binomial)
soc_data$done_col <- as.integer(as.logical(soc_data$done))
soc_data$done_col
done_model <- glmer(SoC ~ done_col + drift*level_difficulty + input_noise + (1|ID),  data = soc_data, family=binomial)
done_model <- glmer(SoC ~ done + drift*level_difficulty + input_noise + (1|ID),  data = soc_data, family="binomial")
done_model <- glmer(done ~ drift*level_difficulty + input_noise + (1|ID),  data = soc_data, family=binomial)
summary(done_model)
tab_model(done_model)
done_model <- glmer(done ~ drift + level_difficulty + input_noise + (1|ID),  data = soc_data, family=binomial)
summary(done_model)
tab_model(done_model)
# predicting outcome given specific levels of covariates
predict(done_model, type='response', newdata = soc_data(drift=TRUE, level_difficulty="hard", input_noise="S"))
# predicting outcome given specific levels of covariates
predict(done_model, type='response', newdata = data.frame(drift=TRUE, level_difficulty="hard", input_noise="S"))
done_model <- glmer(done ~ drift + level_difficulty + input_noise + (1|ID),  data = soc_data, family=binomial)
# predicting outcome given specific levels of covariates
predict(done_model, type='response', newdata = data.frame(drift=TRUE, level_difficulty="hard", input_noise="S"))
predict(done_model, type='response', newdata = data.frame(drift=TRUE, input_noise="S"))
predict(done_model, type='response', newdata = data.frame(drift=TRUE, level_difficulty="hard", input_noise="S", ID=c(soc_data$ID)))
predict(done_model, type='response', newdata = data.frame(drift=TRUE, level_difficulty="hard", input_noise="S", ID=c()))
soc_data$ID
predict(done_model, type='response', newdata = data.frame(drift=TRUE, level_difficulty="hard", input_noise="S", ID=c(unique(soc_data$ID))))
predict(done_model, type='response', newdata = data.frame(drift=TRUE))
unique(soc_data$level_difficulty)
unique(soc_data$input_noise)
predict(done_model, type='response', newdata = data.frame(drift=TRUE, level_difficulty=c("easy", "medium", "hard"), input_noise=c("N", "W", "S"), ID=c(unique(soc_data$ID))))
# bootstrap
confint(done_model, nsim=N_iterations, parm=c("driftTRUE", "driftFALSE", "level_difficultyeasy", "level_difficultymedium", "level_difficultyhard", "input_noiseW", "input_noiseS"), method="boot")
N_iterations <- 1000
confint(done_model, nsim=N_iterations, parm=c("driftTRUE", "driftFALSE", "level_difficultyeasy", "level_difficultymedium", "level_difficultyhard", "input_noiseN", "input_noiseW", "input_noiseS"), method="boot")
N_iterations <- 100
confint(done_model, nsim=N_iterations, parm=c("driftTRUE", "driftFALSE", "level_difficultyeasy", "level_difficultymedium", "level_difficultyhard", "input_noiseN", "input_noiseW", "input_noiseS"), method="boot")
# predicting outcome given specific levels of covariates
predict(done_model, type='response', newdata = data.frame(drift=TRUE, level_difficulty="hard", input_noise="S", ID=c(unique(soc_data$ID)))) # do that for all individual participant IDs
# isolating the effect of drift = TRUE
predict(done_model, type='response', newdata = data.frame(drift=TRUE, level_difficulty=c("easy", "medium", "hard"), input_noise=c("N", "W", "S"), ID=c(unique(soc_data$ID))))
summary(done_model)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
library(lmerTest)
library(sjPlot)
library(latex2exp)
library(ggplot2)
library(fitdistrplus)
library(simr)
library(arrow)
set.seed(36)
N_iterations <- 10000
setwd('/Users/heinrich/Projects/eye_movement_analysis_moonlander/')
data_saccades <- read_csv("eye_data/experimental_eye_data_saccades.csv")
# level difficulty
# Most likely we won't use level difficulty as fixed effect. But we will nevertheless relevel it.
## fixations
data_fixations <- data_fixations %>%
mutate(level_difficulty = case_when(
(level == 1 | level == 2) ~ "easy",
(level == 3 | level == 4) ~ "medium",
(level == 5 | level == 6) ~ "hard",
))
data_fixations$level_difficulty <- as.factor(data_fixations$level_difficulty)
data_fixations <- within(data_fixations, level_difficulty <- relevel(level_difficulty, ref = "easy"))
## saccades
data_saccades <- data_saccades %>%
mutate(level_difficulty = case_when(
(level == 1 | level == 2) ~ "easy",
(level == 3 | level == 4) ~ "medium",
(level == 5 | level == 6) ~ "hard",
))
data_saccades$level_difficulty <- as.factor(data_saccades$level_difficulty)
data_saccades <- within(data_saccades, level_difficulty <- relevel(level_difficulty, ref = "easy"))
# input noise
## fixations
data_fixations$input_noise <- factor(data_fixations$input_noise, levels = c("N", "W", "S"))
#data_fixations$input_noise <- as.factor(data_fixations$input_noise)
#data_fixations <- within(data_fixations, input_noise <- relevel(input_noise, ref = "N"))
## saccades
data_saccades$input_noise <- factor(data_saccades$input_noise, levels = c("N", "W", "S"))
#data_saccades$input_noise <- as.factor(data_saccades$input_noise)
#data_saccades <- within(data_saccades, input_noise <- relevel(input_noise, ref = "N"))
data_fixations <- read_csv("eye_data/experimental_eye_data_fixations.csv")
# level difficulty
# Most likely we won't use level difficulty as fixed effect. But we will nevertheless relevel it.
## fixations
data_fixations <- data_fixations %>%
mutate(level_difficulty = case_when(
(level == 1 | level == 2) ~ "easy",
(level == 3 | level == 4) ~ "medium",
(level == 5 | level == 6) ~ "hard",
))
data_fixations$level_difficulty <- as.factor(data_fixations$level_difficulty)
data_fixations <- within(data_fixations, level_difficulty <- relevel(level_difficulty, ref = "easy"))
## saccades
data_saccades <- data_saccades %>%
mutate(level_difficulty = case_when(
(level == 1 | level == 2) ~ "easy",
(level == 3 | level == 4) ~ "medium",
(level == 5 | level == 6) ~ "hard",
))
data_saccades$level_difficulty <- as.factor(data_saccades$level_difficulty)
data_saccades <- within(data_saccades, level_difficulty <- relevel(level_difficulty, ref = "easy"))
# input noise
## fixations
data_fixations$input_noise <- factor(data_fixations$input_noise, levels = c("N", "W", "S"))
#data_fixations$input_noise <- as.factor(data_fixations$input_noise)
#data_fixations <- within(data_fixations, input_noise <- relevel(input_noise, ref = "N"))
## saccades
data_saccades$input_noise <- factor(data_saccades$input_noise, levels = c("N", "W", "S"))
#data_saccades$input_noise <- as.factor(data_saccades$input_noise)
#data_saccades <- within(data_saccades, input_noise <- relevel(input_noise, ref = "N"))
# only considering fixations with duration > 0:
data_fixations <- data_fixations[data_fixations$fixation_duration > 0, ]
View(data_fixations)
data_fixations <- data_fixations %>%
mutate(fixation_type = case_when(
(exploring_fixation == 1) ~ 0,
(exploring_fixation == 0) ~ 1,
))
View(data_fixations)
write_feather(data_fixations, "Experiment1_FixationsComplete.arrow")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
library(lmerTest)
library(sjPlot)
library(latex2exp)
library(ggplot2)
library(fitdistrplus)
library(simr)
library(arrow)
set.seed(36)
N_iterations <- 10000
setwd('/Users/heinrich/Projects/eye_movement_analysis_moonlander/')
data_fixations <- read_csv("eye_data/experimental_eye_data_fixations.csv")
data_saccades <- read_csv("eye_data/experimental_eye_data_saccades.csv")
# level difficulty
# Most likely we won't use level difficulty as fixed effect. But we will nevertheless relevel it.
## fixations
data_fixations <- data_fixations %>%
mutate(level_difficulty = case_when(
(level == 1 | level == 2) ~ "easy",
(level == 3 | level == 4) ~ "medium",
(level == 5 | level == 6) ~ "hard",
))
data_fixations$level_difficulty <- as.factor(data_fixations$level_difficulty)
data_fixations <- within(data_fixations, level_difficulty <- relevel(level_difficulty, ref = "easy"))
## saccades
data_saccades <- data_saccades %>%
mutate(level_difficulty = case_when(
(level == 1 | level == 2) ~ "easy",
(level == 3 | level == 4) ~ "medium",
(level == 5 | level == 6) ~ "hard",
))
data_saccades$level_difficulty <- as.factor(data_saccades$level_difficulty)
data_saccades <- within(data_saccades, level_difficulty <- relevel(level_difficulty, ref = "easy"))
# input noise
## fixations
data_fixations$input_noise <- factor(data_fixations$input_noise, levels = c("N", "W", "S"))
#data_fixations$input_noise <- as.factor(data_fixations$input_noise)
#data_fixations <- within(data_fixations, input_noise <- relevel(input_noise, ref = "N"))
## saccades
data_saccades$input_noise <- factor(data_saccades$input_noise, levels = c("N", "W", "S"))
#data_saccades$input_noise <- as.factor(data_saccades$input_noise)
#data_saccades <- within(data_saccades, input_noise <- relevel(input_noise, ref = "N"))
soc_data <- read_csv("soc_data/soc_data.csv")
soc_data <- soc_data %>%
mutate(level_difficulty = case_when(
(level == 1 | level == 2) ~ "easy",
(level == 3 | level == 4) ~ "medium",
(level == 5 | level == 6) ~ "hard",
))
soc_data$level_difficulty <- as.factor(soc_data$level_difficulty)
soc_data <- within(soc_data, level_difficulty <- relevel(level_difficulty, ref = "easy"))
soc_data$input_noise <- as.factor(soc_data$input_noise)
soc_data <- within(soc_data, input_noise <- relevel(input_noise, ref = "N"))
#table(soc_data$SoC)
write_feather(soc_data, "soc_data/Experiment1_SoCData.arrow")
done_model <- glmer(done ~ drift * level_difficulty + input_noise + (1|ID),  data = soc_data, family=binomial)
summary(done_model)
tab_model(done_model)
predict(done_model, type='response',
newdata = data.frame(input_noise='S'))
predict(done_model, type='response',
newdata = data.frame(input_noise='S', drift="True"))
predict(done_model, type='response',
newdata = data.frame(input_noise='S', drift="False", level_difficulty="easy"))
predict(done_model, type='response',
newdata = data.frame(input_noise='S', drift='FALSE', level_difficulty='medium'))
# predicting outcome given specific levels of covariates
predict(done_model, type='response', newdata = data.frame(drift=TRUE, level_difficulty="hard", input_noise="S", ID=c(unique(soc_data$ID)))) # do that for all individual participant IDs
# isolating the effect of drift = TRUE
predict(done_model, type='response', newdata = data.frame(drift=TRUE, level_difficulty=c("easy", "medium", "hard"), input_noise=c("N", "W", "S"), ID=c(unique(soc_data$ID))))
# predicting outcome given specific levels of covariates
predict(done_model, type='response', newdata = data.frame(drift=TRUE, level_difficulty="hard", input_noise="S", ID=c(unique(soc_data$ID)))) # do that for all individual participant IDs
# vs. input_noise = none
predict(done_model, type='response', newdata = data.frame(drift=TRUE, level_difficulty="hard", input_noise="None", ID=c(unique(soc_data$ID)))) # do that for all individual participant IDs
# vs. input_noise = none
predict(done_model, type='response', newdata = data.frame(drift=TRUE, level_difficulty="hard", input_noise="N", ID=c(unique(soc_data$ID)))) # do that for all individual participant IDs
# predicting outcome given specific levels of covariates
predict(done_model, type='response', newdata = data.frame(drift=TRUE, level_difficulty=c("easy", "medium", "hard"), input_noise="S", ID=c(unique(soc_data$ID)))) # do that for all individual participant IDs
# vs. input_noise = none
predict(done_model, type='response', newdata = data.frame(drift=TRUE, level_difficulty=c("easy", "medium", "hard"), input_noise="N", ID=c(unique(soc_data$ID)))) # do that for all individual participant IDs
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
library(lmerTest)
library(sjPlot)
library(latex2exp)
library(ggplot2)
library(fitdistrplus)
library(simr)
library(arrow)
set.seed(36)
N_iterations <- 10000
setwd('/Users/heinrich/Projects/eye_movement_analysis_moonlander/')
data_fixations <- read_csv("eye_data/experimental_eye_data_fixations.csv")
data_saccades <- read_csv("eye_data/experimental_eye_data_saccades.csv")
# level difficulty
# Most likely we won't use level difficulty as fixed effect. But we will nevertheless relevel it.
## fixations
data_fixations <- data_fixations %>%
mutate(level_difficulty = case_when(
(level == 1 | level == 2) ~ "easy",
(level == 3 | level == 4) ~ "medium",
(level == 5 | level == 6) ~ "hard",
))
data_fixations$level_difficulty <- as.factor(data_fixations$level_difficulty)
data_fixations <- within(data_fixations, level_difficulty <- relevel(level_difficulty, ref = "easy"))
## saccades
data_saccades <- data_saccades %>%
mutate(level_difficulty = case_when(
(level == 1 | level == 2) ~ "easy",
(level == 3 | level == 4) ~ "medium",
(level == 5 | level == 6) ~ "hard",
))
data_saccades$level_difficulty <- as.factor(data_saccades$level_difficulty)
data_saccades <- within(data_saccades, level_difficulty <- relevel(level_difficulty, ref = "easy"))
# input noise
## fixations
data_fixations$input_noise <- factor(data_fixations$input_noise, levels = c("N", "W", "S"))
#data_fixations$input_noise <- as.factor(data_fixations$input_noise)
#data_fixations <- within(data_fixations, input_noise <- relevel(input_noise, ref = "N"))
## saccades
data_saccades$input_noise <- factor(data_saccades$input_noise, levels = c("N", "W", "S"))
#data_saccades$input_noise <- as.factor(data_saccades$input_noise)
#data_saccades <- within(data_saccades, input_noise <- relevel(input_noise, ref = "N"))
setwd('/Users/heinrich/Projects/eye_movement_analysis_moonlander/')
data_fixations <- read_csv("eye_data/experimental_eye_data_fixations.csv")
data_saccades <- read_csv("eye_data/experimental_eye_data_saccades.csv")
# only considering fixations with duration > 0:
#data_fixations <- data_fixations[data_fixations$fixation_duration > 0.06, ]
# The eye tracker might have flagged single frames as fixations. These would have lasted no time and we will simply filter them out.
# distinguishing exploring and resting fixations
#x_sp = 972
#y_sp = 288
# 4° is half of the span of the parafovea. We will use that as the threshold (keeping the spaceship clearly visible vs. not)
#threshold = 4
#data_fixations$distance_to_spaceship <- sqrt((data_fixations$converging_eye_x_adjusted - x_sp)**2 + (data_fixations$converging_eye_y_adjusted - y_sp)**2)
exploring_fixations <- data_fixations[data_fixations$exploring_fixation == 1, ]
resting_fixations <- data_fixations[data_fixations$exploring_fixation == 0, ]
# julia
write_feather(exploring_fixations, "Experiment1_DistantFixations.arrow")
write_feather(resting_fixations, "Experiment1_CloseFixations.arrow")
View(data_fixations)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
library(lmerTest)
library(sjPlot)
library(latex2exp)
library(ggplot2)
library(fitdistrplus)
library(simr)
library(arrow)
set.seed(36)
N_iterations <- 10000
setwd('/Users/heinrich/Projects/eye_movement_analysis_moonlander/')
data_fixations <- read_csv("eye_data/experimental_eye_data_fixations.csv")
data_saccades <- read_csv("eye_data/experimental_eye_data_saccades.csv")
exploring_fixations
exploring_fixations$Dist_to_closest_obstacles
hist(exploring_fixations$Dist_to_closest_obstacles, breaks=200)
exploring_fixations$Dist_to_closest_obstacles.log <- log(exploring_fixations$Dist_to_closest_obstacles)
fit.gauss <- fitdist(exploring_fixations$Dist_to_closest_obstacles.log, distr = "norm", method = "mme")
summary(fit.gauss)
plot(fit.gauss)
hist(exploring_fixations$Dist_to_closest_obstacles, breaks=200)
fit.gauss <- fitdist(exploring_fixations$Dist_to_closest_obstacles.log, distr = "norm", method = "mme")
exploring_fixations$Dist_to_closest_obstacles.log <- log(drop_na(exploring_fixations$Dist_to_closest_obstacles))
exploring_fixations$Dist_to_closest_obstacles.log <- log(exploring_fixations$Dist_to_closest_obstacles)
exploring_fixations$Dist_to_closest_obstacles.log
drop_na(exploring_fixations$Dist_to_closest_obstacles.log)
fit.gauss <- fitdist(filter(!is.na(exploring_fixations$Dist_to_closest_obstacles.log)), distr = "norm", method = "mme")
fit.gauss <- fitdist(exploring_fixations$Dist_to_closest_obstacles.log, distr = "norm", method = "mme")
#fit.gauss <- fitdist(exploring_fixations$Dist_to_closest_obstacles.log, distr = "norm", method = "mme")
fit.gauss <- fitdist(exploring_fixations[!is.na(exploring_fixations$Dist_to_closest_obstacles.log)], distr = "norm", method = "mme")
exploring_fixations[!is.na(exploring_fixations$Dist_to_closest_obstacles.log)]
[!is.na(exploring_fixations$Dist_to_closest_obstacles.log)]
#fit.gauss <- fitdist(exploring_fixations$Dist_to_closest_obstacles.log, distr = "norm", method = "mme")
fit.gauss <- fitdist(exploring_fixations.Dist_to_closest_obstacles.log[!is.na(exploring_fixations$Dist_to_closest_obstacles.log)], distr = "norm", method = "mme")
exploring_fixations$Dist_to_closest_obstacles.log <- log(exploring_fixations$Dist_to_closest_obstacles)
#fit.gauss <- fitdist(exploring_fixations$Dist_to_closest_obstacles.log, distr = "norm", method = "mme")
fit.gauss <- fitdist(exploring_fixations.Dist_to_closest_obstacles.log[!is.na(exploring_fixations$Dist_to_closest_obstacles.log)], distr = "norm", method = "mme")
fit.gauss <- fitdist(na.omit(exploring_fixations.Dist_to_closest_obstacles.log), distr = "norm", method = "mme")
exploring_fixations$Dist_to_closest_obstacles.log
fit.gauss <- fitdist(na.omit(exploring_fixations$Dist_to_closest_obstacles.log), distr = "norm", method = "mme")
v_log <- log(exploring_fixations$Dist_to_closest_obstacles)
v_log[!is.na(v_log)]
v_log <- v_log[!is.na(v_log)]
fit.gauss <- fitdist(v_log, distr = "norm", method = "mme")
summary(fit.gauss)
plot(fit.gauss)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
library(lmerTest)
library(sjPlot)
library(latex2exp)
library(ggplot2)
library(fitdistrplus)
library(simr)
library(arrow)
set.seed(36)
N_iterations <- 10000
fixData_exp1 <- read_csv("eye_data/experimental_eye_data_fixations.csv")
exploring_fixations_exp1 <- fixData_exp1[fixData_exp1$exploring_fixation == 1, ]
resting_fixations_exp1 <- fixData_exp1[fixData_exp1$exploring_fixation == 0, ]
# Writing to arrow
write_feather(exploring_fixations_exp1, "Experiment1_DistantFixations.arrow")
write_feather(resting_fixations_exp1, "Experiment1_CloseFixations.arrow")
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/heinrich/Projects/vr_eye_tracking")
library(saccades)
library(tidyverse)
data <- read.csv("008.csv", sep = ";")
data
colnames(data)
data[, c(6:9)] <- sapply(data[, c(6:9)], as.numeric)
data$x = (data$x_left + data$x_right) / 2
data$y = (data$y_left + data$y_right) / 2
df <- data.frame(x = data$x,
y = data$y,
trial = data$Trial,
time = data$game_time_in_sec
)
ggplot(df, aes(x, y)) +
geom_point(size=0.2) +
geom_path(color="red", size=0.2) +
coord_fixed() +
facet_wrap(trial)
View(df)
df$trial
ggplot(df, aes(x, y)) +
geom_point(size=0.2) +
geom_path(color="red", size=0.2) +
coord_fixed() +
facet_wrap(~trial)
fixations <- detect.fixations(df, smooth.coordinates = TRUE, smooth.saccades = FALSE)
head(fixations)
fixations <- detect.fixations(df, smooth.coordinates = TRUE, smooth.saccades = FALSE, lambda = 1)
head(fixations)
fixations <- detect.fixations(df, smooth.coordinates = TRUE, smooth.saccades = FALSE, lambda = 10)
head(fixations)
fixations <- detect.fixations(df, smooth.coordinates = TRUE, smooth.saccades = FALSE, lambda = 15)
head(fixations)
fixations <- detect.fixations(df, smooth.coordinates = TRUE, smooth.saccades = FALSE, lambda = 100)
head(fixations)
fixations <- detect.fixations(df, smooth.coordinates = TRUE, smooth.saccades = FALSE, lambda = 6)
head(fixations)
fixations <- detect.fixations(df, smooth.coordinates = TRUE, smooth.saccades = FALSE, lambda = 6)
fixations
View(fixations)
knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/heinrich/Projects/eye_movement_analysis_moonlander/')
data_fixations <- read_csv("eye_data/experimental_eye_data_fixations.csv")
library(tidyverse)
library(lme4)
library(lmerTest)
library(sjPlot)
library(latex2exp)
library(ggplot2)
library(fitdistrplus)
library(simr)
library(arrow)
set.seed(36)
N_iterations <- 10000
data_fixations <- read_csv("eye_data/experimental_eye_data_fixations.csv")
# level difficulty
# Most likely we won't use level difficulty as fixed effect. But we will nevertheless relevel it.
## fixations
data_fixations <- data_fixations %>%
mutate(level_difficulty = case_when(
(level == 1 | level == 2) ~ "easy",
(level == 3 | level == 4) ~ "medium",
(level == 5 | level == 6) ~ "hard",
))
data_fixations$level_difficulty <- as.factor(data_fixations$level_difficulty)
data_fixations <- within(data_fixations, level_difficulty <- relevel(level_difficulty, ref = "easy"))
# input noise
## fixations
data_fixations$input_noise <- factor(data_fixations$input_noise, levels = c("N", "W", "S"))
# insert column fixation_type with exploring fixation == 0 and resting_fixation == 1
data_fixations <- data_fixations %>%
mutate(fixation_type = case_when(
(exploring_fixation == 1) ~ 0,
(exploring_fixation == 0) ~ 1,
))
write_feather(data_fixations, "Experiment1_FixationsComplete.arrow")
exploring_fixations <- data_fixations[data_fixations$exploring_fixation == 1, ]
resting_fixations <- data_fixations[data_fixations$exploring_fixation == 0, ]
# julia arrow data
write_feather(exploring_fixations, "Experiment1_DistantFixations.arrow")
write_feather(resting_fixations, "Experiment1_CloseFixations.arrow")
library("devtools")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(arrow)
library(MASS)
setwd('/Users/heinrich/Projects/Moonlander_ii_LMM/')
close_fixations <- read_csv("data/Experiment2_CloseFixations.arrow")
close_fixations <- read_feather("data/Experiment2_CloseFixations.arrow")
distant_fixations <- read_feather("data/Experiment2_DistantFixations.arrow")
View(close_fixations)
boxcox(lm(close_fixations$fixation_duration ~ 1))
boxcox(lm(close_fixations$distance_to_spaceship ~ 1))
boxcox(lm(close_fixations$distance_to_spaceship ~ 1))
boxcox(lm(distant_fixations$fixation_duration ~ 1))
boxcox(lm(distant_fixations$fixation_duration ~ 1))
boxcox(lm(distant_fixations$distance_to_spaceship ~ 1))
View(close_fixations)
close_fixations$distance_to_spaceship.log <- log(close_fixations$distance_to_spaceship)
View(close_fixations)
close_fixations$fixation_duration.log <- log(close_fixations$fixation_duration)
View(close_fixations)
distant_fixations$fixation_duration.log <- log(close_fixations$fixation_duration)
distant_fixations$fixation_duration.log <- log(distant_fixations$fixation_duration)
